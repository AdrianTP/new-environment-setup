#!/usr/bin/env bash

# Taken from https://stackoverflow.com/a/246128/771948
SOURCE="${BASH_SOURCE[0]}"
while [ -h "$SOURCE" ]; do # resolve $SOURCE until the file is no longer a symlink
  DIR="$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )"
  SOURCE="$(readlink "$SOURCE")"
  [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE" # if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located
done
DIR="$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )"

DB_CONFIG_PARENT_DIR_PATH="$DIR/../.private"
DB_CONFIG_FILE_REALPATH="$(realpath "$DB_CONFIG_PARENT_DIR_PATH/databases.json")"

USAGE="Usage:
  db [name]
    Connects to the specified database, if it exists
  db [-l]
    List all mapped database names"

# shellcheck disable=SC2016
MERGE_QUERY='(.defaults * .databases[$TARGET] * .hosts[.databases[$TARGET].host_alias])'

PASSWORD_QUERY=$(cat <<-_END_PASSWORD_QUERY_
if .prompt_password then ""
elif .password then "export PGPASSWORD=\(.password)"
else ""
end
_END_PASSWORD_QUERY_
)

# shellcheck disable=SC2016
CONNECT_QUERY='. as $d
 | "psql -h \(.host) -d \(.database) -p \(.port) -U \(.user)" as $o
 | $d
 | if $d.prompt_password
   then $o + " -W"
   else $o
 end'

ISREADY_QUERY='("pg_isready --host=\(.host) --dbname=\(.database) --port=\(.port) --username=\(.user)")'

list() {
	jq -r '.databases | keys[]' "$DB_CONFIG_FILE_REALPATH"
	return "$?"
}

config_has_database() {
	config_has_database="$(jq -r --arg TARGET "$1" '.databases | has($TARGET)' "$DB_CONFIG_FILE_REALPATH")"
	if [ "$config_has_database" = "true" ]; then
		true
	else
		false
	fi
}

isready() {
	MERGED_JSON="$(jq --arg TARGET "$1" "$MERGE_QUERY" "$DB_CONFIG_FILE_REALPATH")"
	cmd="$(echo "$MERGED_JSON" | jq -r "$ISREADY_QUERY")"
	echo "Executing $cmd"
	$cmd
}

connect() {
	set_pgpassword_cmd="$(echo "$MERGED_JSON" | jq -r "$PASSWORD_QUERY")"
	cmd="$(echo "$MERGED_JSON" | jq -r "$CONNECT_QUERY")"
	if [ -z "$set_pgpassword_cmd" ]; then
		echo "Prompting for password"
		cmd="$cmd -W"
	else
		echo "Using predefined password"
		$set_pgpassword_cmd
	fi
	echo "Executing $cmd"
	$cmd
}

# App entry point
if ! [ -x "$(command -v jq)" ]; then # https://stackoverflow.com/a/26759734/771948
	# shellcheck disable=SC2016
	echo 'jq is not installed. Run `brew install jq`.' >&2
	exit 1
elif [ ! -f "$DB_CONFIG_FILE_REALPATH" ]; then
	echo "databases.json file does not exist"
	echo "creating file at $DB_CONFIG_FILE_REALPATH"
	mkdir -p "$DB_CONFIG_PARENT_DIR_PATH"
	cat <<-JSON > "$DB_CONFIG_FILE_REALPATH"
	{
	  "defaults": {
	    "prompt_password": true,
	    "port": "5432"
	  },
	  "databases": {}
	}
	JSON
elif [ $# -ne 1 ]; then
	echo "$USAGE"
	exit 1
elif [ "$1" = "-l" ]; then
	list
elif ! config_has_database "$1"; then
	echo "Database \"$1\" is not mapped."
	exit 1
elif ! isready "$1"; then
	echo "Database \"$1\" is unreachable."
	exit 1
else
	connect "$1"
fi

exit $?
