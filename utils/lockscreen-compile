#!/usr/bin/env bash

# Taken from https://stackoverflow.com/a/246128/771948
SOURCE="${BASH_SOURCE[0]}"
while [ -h "$SOURCE" ]; do # resolve $SOURCE until the file is no longer a symlink
	DIR="$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )"
	SOURCE="$(readlink "$SOURCE")"
	[[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE" # if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located
done
DIR="$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )"

# Taken from https://apple.stackexchange.com/a/123738/23040
# Do our work in the temporary directory that gets cleaned on boot
cd /tmp

## Create the source file
#cat > main.m <<END_OF_FILE

##import <objc/runtime.h>
##import <Foundation/Foundation.h>

#int main () {
#    NSBundle *bundle = [NSBundle bundleWithPath:@"/Applications/Utilities/Keychain Access.app/Contents/Resources/Keychain.menu"];

#    Class principalClass = [bundle principalClass];

#    id instance = [[principalClass alloc] init];

#    [instance performSelector:@selector(_lockScreenMenuHit:) withObject:nil];

#    return 0;
#}

#END_OF_FILE

## Compile the source file
#clang -framework Foundation main.m -o lockscreen

# Taken from https://stackoverflow.com/a/26492632/771948
cat > lockscreen.c <<END_OF_FILE

// lockscreen.c
extern int SACLockScreenImmediate ( void );

int main ( ) {
    return SACLockScreenImmediate();
}

END_OF_FILE

clang -F /System/Library/PrivateFrameworks -framework login -o lockscreen lockscreen.c 

cp /tmp/lockscreen "$DIR/lockscreen"
