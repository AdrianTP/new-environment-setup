#!/usr/bin/env bash

# Setup:
#   Run: `mkdir -p ~/.git/hooks`
#   Run: `git config --global core.hooksPath ~/.git/hooks`
#   Put this file at `~/.git/hooks/pre-commit`
#   Run: `chmod +x ~/.git/hooks/pre-commit`

# This script does not handle file names that contain spaces.

# From https://stackoverflow.com/a/3232082/771948
confirm() {
	# call with a prompt string or use a default
	read -r -p "${1:-Are you sure? [y/N]} " response
	case "$response" in
		[yY][eE][sS]|[yY])
			true
			;;
		*)
			false
			;;
	esac
}

# If GIT_SKIP_PRE is set, exit immediately and advise the user
# Set this variable to skip these pre-commit checks
if [ -n "$GIT_SKIP_PRE" ]; then
	printf "\n\`GIT_SKIP_PRE\` is set; skipping pre-commit script. Run"
	printf " \`unset GIT_SKIP_PRE\` to resume pre-commit checks.\n"
	exit 0
fi

# If .git-skip exists in the repository, delete it and exit immediately
# Create this file within a repository to skip these pre-commit checks just once
# If the file is tracked by the master branch, then it will leave the file alone
#   and skip the checks
# If the file is tracked only by the current branch, then it will ask whether
#   that was intentional before continuing and skipping the checks
# If the file is untracked, it will delete the file, then skip the checks
if [ -f .git-skip ]; then
	printf "\nDetected \`.git-skip\` file."
	list_master=$(git ls-tree -r master --name-only)
	list_current=$(git ls-files)
	match_master=$(grep ".git-skip" <<< "$list_master")
	match_current=$(grep ".git-skip" <<< "$list_current")
	if [ -n "$match_master" ]; then
		printf " Skipping pre-commit checks."
		printf "\n\nNOTE: The file is tracked by the master branch of this repository."
		printf " Remove this file from the master branch in order to resume"
		printf " pre-commit checks.\n\n"
		exit 0
	elif [ -n "$match_current" ]; then
		printf " The file is tracked by the current branch of this repository. This"
		printf " is most likely a mistake.\n"
		exec < /dev/tty
		if confirm "Are you sure you want to commit the \`.git-skip\` file? [y/N]"; then
			cat <<-SKIP
				Received an affirmative response.
				Skipping pre-commit checks and committing the \`.git-skip\` file.

			SKIP
			exec <&-
			exit 0
		else
			cat <<-SKIP
				Received a negative response.
				Please unstage the file with \`git reset HEAD .git-skip\` and try again.

			SKIP
			exec <&-
			exit 1
		fi
	else
		printf " Skipping pre-commit checks and deleting the \`.git-skip\` file."
		printf " Run \`touch .git-skip\` to re-enable skipping pre-commit checks for"
		printf " a single run.\n\n"
		rm .git-skip
		exit 0
	fi
else
	printf " You can skip these pre-commit checks one time by running"
	printf " \`touch .git-skip\` within this repository."
fi

# Gathers all staged golang files
echo "Gathering all changed golang files..."
gofiles=$(git diff --cached --name-only --diff-filter=ACM | grep '\.go$')
if [ -z "$gofiles" ]; then
	echo "No changed golang files found; exiting"
	exit 0
fi

# Runs golang tests and halts if any tests fail
printf "\nRunning \`go test ./...\`\n"
tests=$(go test ./... 2>&1)
if [[ "$tests" == *"FAIL"* ]]; then
	echo >&2 "Tests failed:"
	echo "$tests"
	exit 1
elif [[ "$tests" == *"can't load package"* ]]; then
	echo >&2 "Tests missing:"
	echo "$tests"
elif [[ "$tests" == "ok"* ]]; then
	echo "Tests passed!"
	echo "$tests"
fi

# Runs and prints linting results
printf "\nRunning \`golint ./...\`\n"
golint ./...
printf "\nRunning \`gocritic check ./...\`\n"
gocritic check ./...
printf "\nRunning \`go vet ./...\`\n"
go vet ./...

# Find TODO, FIXME, etc. in staged files and halt if detected
printf "\nChecking for TODO, FIXME, etc.\n"
todo_re="(TODO|FIXME|CHANGED|XXX|IDEA|HACK|NOTE|REVIEW|NB|BUG|QUESTION|COMBAK|TEMP)"
printed=false
while read -r f; do
	matches=$(grep -nE "$todo_re" "$f")
	if [ -n "$matches" ]; then
		if [ "$printed" == false ]; then
			echo >&2 "Files contain TODO-style comments:"
			printed=true
		fi
		echo "  in \`$f\`:"
		while read -r m; do
			echo "    $m"
		done <<< "$matches"
	fi
done <<< "$gofiles"

if [ "$printed" == true ];then
	echo >&2 "Please remove these comments before committing your code"
	exit 1
fi

# Find calls to spew
printf "\nChecking for usage of Spew\n"
import_re="github.com/davecgh/go-spew/spew"
spew_call_re="spew\."
printed=false
while read -r f; do
	imports=$(grep -n "$import_re" "$f")
	calls=$(grep -n "$spew_call_re" "$f")
	if [ -n "$imports" ] || [ -n "$calls" ]; then
		if [ "$printed" == false ]; then
			echo >&2 "Files contain references to spew:"
			printed=true
		fi
		echo "  in \`$f\`:"
		echo "    import(s):"
		while read -r import; do
			echo "      $import"
		done <<< "$imports"
		echo "    call(s):"
		while read -r call; do
			echo "      $call"
		done <<< "$calls"
	fi
done <<< "$gofiles"

if [ "$printed" == true ];then
	echo >&2 "Please remove these references to Spew before committing your code"
	exit 1
fi

# if unformatted files exist, exit and print
printf "\nRunning \`gofmt -l <changed_files>\`\n"
# shellcheck disable=SC2086 # quoting $gofiles breaks it
unformatted=$(gofmt -l $gofiles 2>&1)
if [ -n "$unformatted" ]; then
	# Some files are not gofmt'd. Print message and fail.

	echo >&2 "Go files must be formatted with gofmt. Please run:"
	for fn in $unformatted; do
		echo >&2 "  gofmt -w $PWD/$fn"
	done

	exit 1
else
	echo "All is well!"
fi